{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport nc from 'next-connect';\nimport notes from '../../../src/data/data';\n\nconst getNote = id => notes.find(note => note.id === parseInt(id)); // Handler\n\n\nconst handler = nc().get((req, res) => {\n  const note = getNote(req.query.id);\n\n  if (!note) {\n    res.status(404);\n    res.end();\n    return;\n  }\n\n  res.json({\n    data: note\n  });\n}).patch((req, res) => {\n  const note = getNote(req.query.id);\n\n  if (!note) {\n    res.status(404);\n    res.end();\n    return;\n  }\n\n  const i = notes.findIndex(note => note.id === parseInt(req.query.id));\n\n  const noteUpdates = _objectSpread(_objectSpread({}, note), req.body);\n\n  notes[i] = noteUpdates;\n  res.json({\n    data: noteUpdates\n  });\n}).delete((req, res) => {\n  const note = getNote(req.query.id);\n\n  if (!note) {\n    res.status(404);\n    res.end();\n    return;\n  }\n\n  const i = notes.findIndex(note => note.id === parseInt(req.query.id));\n  notes.splice(i, 1);\n  res.json({\n    data: noteUpdates\n  });\n});\nexport default handler;","map":{"version":3,"sources":["C:/Users/cijgr/Documents/web-development/jimgo/repos/learning/course-frontendmasters-nextjs/pages/api/notes/[id].js"],"names":["nc","notes","getNote","id","find","note","parseInt","handler","get","req","res","query","status","end","json","data","patch","i","findIndex","noteUpdates","body","delete","splice"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,cAAf;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;AAEA,MAAMC,OAAO,GAAIC,EAAD,IAAQF,KAAK,CAACG,IAAN,CAAYC,IAAD,IAAUA,IAAI,CAACF,EAAL,KAAYG,QAAQ,CAACH,EAAD,CAAzC,CAAxB,C,CAEA;;;AACA,MAAMI,OAAO,GAAGP,EAAE,GACfQ,GADa,CACT,CAACC,GAAD,EAAMC,GAAN,KAAc;AACjB,QAAML,IAAI,GAAGH,OAAO,CAACO,GAAG,CAACE,KAAJ,CAAUR,EAAX,CAApB;;AAEA,MAAI,CAACE,IAAL,EAAW;AACTK,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX;AACAF,IAAAA,GAAG,CAACG,GAAJ;AACA;AACD;;AAEDH,EAAAA,GAAG,CAACI,IAAJ,CAAS;AAAEC,IAAAA,IAAI,EAAEV;AAAR,GAAT;AACD,CAXa,EAYbW,KAZa,CAYP,CAACP,GAAD,EAAMC,GAAN,KAAc;AACnB,QAAML,IAAI,GAAGH,OAAO,CAACO,GAAG,CAACE,KAAJ,CAAUR,EAAX,CAApB;;AAEA,MAAI,CAACE,IAAL,EAAW;AACTK,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX;AACAF,IAAAA,GAAG,CAACG,GAAJ;AACA;AACD;;AAED,QAAMI,CAAC,GAAGhB,KAAK,CAACiB,SAAN,CAAiBb,IAAD,IAAUA,IAAI,CAACF,EAAL,KAAYG,QAAQ,CAACG,GAAG,CAACE,KAAJ,CAAUR,EAAX,CAA9C,CAAV;;AACA,QAAMgB,WAAW,mCAAQd,IAAR,GAAiBI,GAAG,CAACW,IAArB,CAAjB;;AAEAnB,EAAAA,KAAK,CAACgB,CAAD,CAAL,GAAWE,WAAX;AACAT,EAAAA,GAAG,CAACI,IAAJ,CAAS;AAAEC,IAAAA,IAAI,EAAEI;AAAR,GAAT;AACD,CA1Ba,EA2BbE,MA3Ba,CA2BN,CAACZ,GAAD,EAAMC,GAAN,KAAc;AACpB,QAAML,IAAI,GAAGH,OAAO,CAACO,GAAG,CAACE,KAAJ,CAAUR,EAAX,CAApB;;AAEA,MAAI,CAACE,IAAL,EAAW;AACTK,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX;AACAF,IAAAA,GAAG,CAACG,GAAJ;AACA;AACD;;AAED,QAAMI,CAAC,GAAGhB,KAAK,CAACiB,SAAN,CAAiBb,IAAD,IAAUA,IAAI,CAACF,EAAL,KAAYG,QAAQ,CAACG,GAAG,CAACE,KAAJ,CAAUR,EAAX,CAA9C,CAAV;AAEAF,EAAAA,KAAK,CAACqB,MAAN,CAAaL,CAAb,EAAgB,CAAhB;AACAP,EAAAA,GAAG,CAACI,IAAJ,CAAS;AAAEC,IAAAA,IAAI,EAAEI;AAAR,GAAT;AACD,CAxCa,CAAhB;AA0CA,eAAeZ,OAAf","sourcesContent":["import nc from 'next-connect';\r\nimport notes from '../../../src/data/data';\r\n\r\nconst getNote = (id) => notes.find((note) => note.id === parseInt(id));\r\n\r\n// Handler\r\nconst handler = nc()\r\n  .get((req, res) => {\r\n    const note = getNote(req.query.id);\r\n\r\n    if (!note) {\r\n      res.status(404);\r\n      res.end();\r\n      return;\r\n    }\r\n\r\n    res.json({ data: note });\r\n  })\r\n  .patch((req, res) => {\r\n    const note = getNote(req.query.id);\r\n\r\n    if (!note) {\r\n      res.status(404);\r\n      res.end();\r\n      return;\r\n    }\r\n\r\n    const i = notes.findIndex((note) => note.id === parseInt(req.query.id));\r\n    const noteUpdates = { ...note, ...req.body };\r\n\r\n    notes[i] = noteUpdates;\r\n    res.json({ data: noteUpdates });\r\n  })\r\n  .delete((req, res) => {\r\n    const note = getNote(req.query.id);\r\n\r\n    if (!note) {\r\n      res.status(404);\r\n      res.end();\r\n      return;\r\n    }\r\n\r\n    const i = notes.findIndex((note) => note.id === parseInt(req.query.id));\r\n\r\n    notes.splice(i, 1);\r\n    res.json({ data: noteUpdates });\r\n  });\r\n\r\nexport default handler;\r\n"]},"metadata":{},"sourceType":"module"}